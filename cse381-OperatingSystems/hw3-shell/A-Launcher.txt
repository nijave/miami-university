Exploring the Launcher
----------------------
....
Command line parsing questions

A1. MAX_LINE_LEN and MAX_ARGS are defined, but there is no comparable
definition for the maximum length of a single argument string.  Is that
ok?  Why or why not? (Hint: See the manpage for strtok.)
Yes it's ok since MAX_LINE_LEN is set it prevents any single argument from being too big. In addition, strtok will just keep returning values until the end is reached and a null is returned

A2. Try adding a blank line to the launch_set file and running the launcher.  Something bad will happen.  Explain and fix this bug. (All of the commands in the file should be executed without error.)
The program tries to process commands that have no length so a null string results since strtok is set to delimit whitespace. Bug fix is to check to make sure the first token isn't null and if it is, break out of the function 


Fork and exec questions

A3. Explain what the return value of fork() means and how this program
uses it.
The return value of fork is the child pid in the parent and 0 in the child. This program uses it to detect if it's in a child process. If it is, it executes the command and exits. Otherwise, it displays an output listing the command and the corresponding process it created

A4. What would happen if this program did not use the fork function, but
just called execv directly?  (You can test your hypothesis: Try changing
line 100 from 'pid = fork();' to 'pid = 0;')
The first command is executed and the program exits (the rest of the program is replaced by the fork call).

A5. What is the role of the status variable?
Accordng to docs, wait(&status) is equivalent to waitpid(-1, &status, 0) which will wait for a status update from any child and update the status pointer to the loation where the status can be found. These functions are blocking. In the context of the program, it causes the parent to wait until each child has terminted/returned

A6. Run './launch launch_set' several times.  You should see some
variation in the output.  What is happening?  Why?
After forking, scheduling is the job of the operating system so it's possible it will run some operations before others based on the current state of the operating system and what the processor is working on. In addition, on a system with multiple cores, one process could finish faster (once again due to the current state of the operating system and what programs are waiting on which devices)

Experimenting with other commands

A7. Try adding a nonexistant command (e.g., "fasdfjaskf" or
"argelfraster") to the launch set.  What happens?  Why?
The program outputs "Error executing command" which initially comes from the operating system when it can't find the file that it's trying to execute

A8. Try adding the command 'cd ..' to the launch_set file.  What happens?
Why?  (Hint: Learn what the 'which' command does; then try typing 'which
cd' in bash.)
This won't execute. cd isn't part of the operating system, it's a command in the shell (the operating system doesn't have a concept of "current directory")

A9. Given what you learned in A6, is the behavior you saw in A8
appropriate?  Is the cd command useful in the launch program?  Why or
why not?
This is mostly appropriate. The shell still has the same functionality. The only viable use case is if you wanted to launch processes in different directories but the shell would need a way to keep track of which directory you're in
